// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: employee/v1/employee.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Prefecture, prefectureFromJSON, prefectureToJSON } from "../../common/v1/common";

export const protobufPackage = "employee.v1";

export interface Employee {
  id: string;
  name: string;
  department: string;
  hometown: Prefecture;
}

function createBaseEmployee(): Employee {
  return { id: "", name: "", department: "", hometown: 0 };
}

export const Employee: MessageFns<Employee> = {
  encode(message: Employee, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.department !== "") {
      writer.uint32(26).string(message.department);
    }
    if (message.hometown !== 0) {
      writer.uint32(32).int32(message.hometown);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Employee {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmployee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.department = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hometown = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Employee {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      department: isSet(object.department) ? globalThis.String(object.department) : "",
      hometown: isSet(object.hometown) ? prefectureFromJSON(object.hometown) : 0,
    };
  },

  toJSON(message: Employee): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.department !== "") {
      obj.department = message.department;
    }
    if (message.hometown !== 0) {
      obj.hometown = prefectureToJSON(message.hometown);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Employee>, I>>(base?: I): Employee {
    return Employee.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Employee>, I>>(object: I): Employee {
    const message = createBaseEmployee();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.department = object.department ?? "";
    message.hometown = object.hometown ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
