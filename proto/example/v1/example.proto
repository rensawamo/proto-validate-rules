syntax = "proto3";

package example.v1;

import "buf/validate/validate.proto";
import "google/api/field_behavior.proto";
import "google/api/visibility.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// 非推奨のフィールドを使いたいとき
message DeprecatedExample {
  // 非推奨のフィールドを使いたいとき
  string deprecated_value = 1 [deprecated = true];
}

// oneofフィールドのうち、どれか一つは必須にしたいとき
message OneofExample {
  oneof union {
    option (buf.validate.oneof).required = true;
    string val1 = 1;
    string val2 = 2;
  }
}

// ignore_empty
message IgnoreEmptyExample {
  // Stingなら空文字列、int32ならゼロ値のようにdefault値を持つフィールドを無視したいとき
  string val1 = 1 [(buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE];
  // 常にバリデーションをスキップする
  string val2 = 2 [(buf.validate.field).ignore = IGNORE_ALWAYS];
  // リクエストボディに値がないときだけバリデーションをスキップする
  // ただし、リクエストボディに値がある場合はバリデーションを実行する
  string val3 = 3 [(buf.validate.field).ignore = IGNORE_IF_UNPOPULATED];
}

// 各種文字列バリデーションを試したいとき
message StringValidationExample {
  // 特定の文字列のみ許可したいとき
  string const_value = 1 [(buf.validate.field).string.const = "const"];
  // 長さをちょうどN文字にしたいとき
  string len_value = 2 [(buf.validate.field).string.len = 5];
  // 最低N文字にしたいとき
  string min_len_value = 3 [(buf.validate.field).string.min_len = 5];
  // 最大N文字にしたいとき
  string max_len_value = 4 [(buf.validate.field).string.max_len = 5];
  // バイト長でちょうどNにしたいとき
  string len_bytes_value = 5 [(buf.validate.field).string.len_bytes = 2];
  // バイト長が最低N以上にしたいとき
  string min_bytes_value = 6 [(buf.validate.field).string.min_bytes = 2];
  // バイト長が最大N以下にしたいとき
  string max_bytes_value = 7 [(buf.validate.field).string.max_bytes = 2];
  // 正規表現にマッチさせたいとき
  string pattern_value = 8 [(buf.validate.field).string.pattern = "^hello, .*$"];
  // 特定の接頭辞を持たせたいとき
  string prefix_value = 9 [(buf.validate.field).string.prefix = "Hello"];
  // 特定の接尾辞を持たせたいとき
  string suffix_value = 10 [(buf.validate.field).string.suffix = "World"];
  // 特定の文字列を含ませたいとき
  string contains_value = 11 [(buf.validate.field).string.contains = "banana"];
  // 特定の文字列を含まないようにしたいとき
  string not_contains_value = 12 [(buf.validate.field).string.not_contains = "banana"];
  // 限定された候補の中からのみ選ばせたいとき
  string in_value = 13 [
    (buf.validate.field).string.in = "A",
    (buf.validate.field).string.in = "B",
    (buf.validate.field).string.in = "C"
  ];
  // 指定の値以外を許可したいとき
  string not_in_value = 14 [
    (buf.validate.field).string.not_in = "A",
    (buf.validate.field).string.not_in = "B",
    (buf.validate.field).string.not_in = "C"
  ];
  // email形式かをチェックしたいとき
  string email_value = 15 [(buf.validate.field).string.email = true];
  // ホスト名形式であることを確認したいとき
  string hostname_value = 16 [(buf.validate.field).string.hostname = true];
  // IPアドレス全般の形式を許容したいとき
  string ip_value = 17 [(buf.validate.field).string.ip = true];
  // IPv4形式のみ許容したいとき
  string ipv4_value = 18 [(buf.validate.field).string.ipv4 = true];
  // IPv6形式のみ許容したいとき
  string ipv6_value = 19 [(buf.validate.field).string.ipv6 = true];
  // URI形式を確認したいとき
  string uri_value = 20 [(buf.validate.field).string.uri = true];
  // URI参照の形式を確認したいとき
  string uri_ref_value = 21 [(buf.validate.field).string.uri_ref = true];
  // アドレス形式（IPまたはホスト名）かを確認したいとき
  string address_value = 22 [(buf.validate.field).string.address = true];
  // UUID形式を確認したいとき
  string uuid_value = 23 [(buf.validate.field).string.uuid = true];
  // 短縮UUID（TUUID）形式を確認したいとき
  string tuuid_value = 24 [(buf.validate.field).string.tuuid = true];
  // IP + プレフィックス長の形式を許容したいとき
  string ip_with_preifxlen_value = 25 [(buf.validate.field).string.ip_with_prefixlen = true];
  string ipv4_with_preifxlen_value = 26 [(buf.validate.field).string.ipv4_with_prefixlen = true];
  string ipv6_with_preifxlen_value = 27 [(buf.validate.field).string.ipv6_with_prefixlen = true];
  string ip_prefix_value = 28 [(buf.validate.field).string.ip_prefix = true];
  string ip4_prefix_value = 29 [(buf.validate.field).string.ipv4_prefix = true];
  string ip6_prefix_value = 30 [(buf.validate.field).string.ipv6_prefix = true];
  // ホスト名とポート番号の形式であることを確認したいとき
  string host_and_port_value = 31 [(buf.validate.field).string.host_and_port = true];
  // KnownRegexによる事前定義済みのパターンで検証したいとき
  string well_kown_regex_value = 32 [
    (buf.validate.field).string.well_known_regex = KNOWN_REGEX_HTTP_HEADER_NAME,
    (buf.validate.field).string.strict = true
  ];
}

// bool型の値を制限したいとき
message BoolValidationExample {
  // 真偽値がtrueに限定されるとき
  bool true_value = 1 [(buf.validate.field).bool.const = true];
  // 真偽値がfalseに限定されるとき
  bool false_value = 2 [(buf.validate.field).bool.const = false];
}

// バイナリデータの内容や長さを制限したいとき
message BytesValidationExample {
  // 固定のバイト列のみ許可したいとき
  bytes const_value = 1 [(buf.validate.field).bytes.const = "\x01\x02\x03\x04"];
  // 長さをちょうどにしたいとき
  bytes len_value = 2 [(buf.validate.field).bytes.len = 4];
  // 最小バイト数にしたいとき
  bytes min_len_value = 3 [(buf.validate.field).bytes.min_len = 2];
  // 最大バイト数にしたいとき
  bytes max_len_value = 4 [(buf.validate.field).bytes.max_len = 2];
  // 正規表現でバイナリを制限したいとき
  bytes pattern_value = 5 [(buf.validate.field).bytes.pattern = "^[a-zA-Z0-9]+$"];
  // 指定したバイナリ接頭辞を持たせたいとき
  bytes prefix_value = 6 [(buf.validate.field).bytes.prefix = "\x01\x02"];
  // 指定したバイナリ接尾辞を持たせたいとき
  bytes suffix_value = 7 [(buf.validate.field).bytes.suffix = "\x02\x03"];
  // 特定のバイト列を含めたいとき
  bytes contains_value = 8 [(buf.validate.field).bytes.contains = "\x02"];
  // 指定の候補だけ許容したいとき
  bytes in_value = 9 [
    (buf.validate.field).bytes.in = "\x01\x02",
    (buf.validate.field).bytes.in = "\x02\x03",
    (buf.validate.field).bytes.in = "\x03\x04"
  ];
  // 指定の候補以外を許容したいとき
  bytes not_in_value = 10 [
    (buf.validate.field).bytes.not_in = "\x01\x02",
    (buf.validate.field).bytes.not_in = "\x02\x03",
    (buf.validate.field).bytes.not_in = "\x03\x04"
  ];
  // バイナリがIP形式のとき
  bytes ip_value = 11 [(buf.validate.field).bytes.ip = true];
  // IPv4形式のとき
  bytes ipv4_value = 12 [(buf.validate.field).bytes.ipv4 = true];
  // IPv6形式のとき
  bytes ipv6_value = 13 [(buf.validate.field).bytes.ipv6 = true];
}

// 数値（浮動小数点）の条件をつけたいとき
message DoubleValidationExample {
  // 値が 42.0 である必要がある
  double const_value = 1 [(buf.validate.field).double.const = 42.0];
  // 10.0 より小さい値である必要がある（9.9など）
  double lt_value = 2 [(buf.validate.field).double.lt = 10.0];
  // 10.0 以下の値である必要がある（10.0もOK）
  double lte_value = 3 [(buf.validate.field).double.lte = 10.0];
  // 10.0 より大きい値である必要がある（10.1など）
  double gt_value = 4 [(buf.validate.field).double.gt = 10.0];
  // 10.0 以上の値である必要がある（10.0もOK）
  double gte_value = 5 [(buf.validate.field).double.gte = 10.0];
  // 10.0, 11.0, 12.0 のいずれかでなければならない
  double in_value = 6 [
    (buf.validate.field).double.in = 10.0,
    (buf.validate.field).double.in = 11.0,
    (buf.validate.field).double.in = 12.0
  ];

  // 10.0, 11.0, 12.0 は使用禁止（それ以外の値ならOK）
  double not_in_value = 7 [
    (buf.validate.field).double.not_in = 10.0,
    (buf.validate.field).double.not_in = 11.0,
    (buf.validate.field).double.not_in = 12.0
  ];
  // 無限大や NaN を拒否したいとき（finite = true）
  double finite_value = 8 [(buf.validate.field).double.finite = true];
}

// Mapのサイズやキー・値の制約をしたいとき
message MapValidationExample {
  map<string, string> min_pairs_value = 1 [(buf.validate.field).map.min_pairs = 2];
  map<string, string> max_pairs_value = 2 [(buf.validate.field).map.max_pairs = 2];
  map<string, string> keys_value = 3 [(buf.validate.field).map.keys = {
    string: {
      min_len: 3
      max_len: 10
    }
  }];
  map<string, string> values_value = 4 [(buf.validate.field).map.values = {
    string: {
      min_len: 3
      max_len: 10
    }
  }];
}

// 繰り返しフィールドの制約をかけたいとき
message RepeatedValidationExample {
  // 繰り返しフィールドの最小要素数を指定したいとき
  repeated string min_items_value = 1 [(buf.validate.field).repeated.min_items = 2];
  // 繰り返しフィールドの最大要素数を指定したいとき
  repeated string max_items_value = 2 [(buf.validate.field).repeated.max_items = 2];
  // 繰り返しフィールドの要素に対して、ユニークな値を要求したいとき
  repeated string unique_value = 3 [(buf.validate.field).repeated.unique = true];
  // 繰り返しフィールドの要素に対して、特定の長さを要求したいとき
  repeated string items_value = 4 [(buf.validate.field).repeated.items = {
    string: {
      min_len: 3
      max_len: 10
    }
  }];
}

// Any型のタイプを制限したいとき
message AnyValidationExample {
  // int32やstringのAny型を許可したいとき
  // ただし、Any型の中身はint32やstringである必要がある
  google.protobuf.Any in_value = 1 [
    (buf.validate.field).any.in = "type.googleapis.com/google.protobuf.Int32Value",
    (buf.validate.field).any.in = "type.googleapis.com/google.protobuf.StringValue"
  ];
  // int32やstringのAny型を許可したくないとき
  // ただし、Any型の中身はint32やstring 以外である必要がある
  google.protobuf.Any not_in_value = 2 [
    (buf.validate.field).any.not_in = "type.googleapis.com/google.protobuf.Int32Value",
    (buf.validate.field).any.not_in = "type.googleapis.com/google.protobuf.StringValue"
  ];
}

// Durationの比較をしたいとき
// Durationの比較をしたいとき
message DurationValidationExample {
  // 指定された秒数と正確に一致している必要があるとき
  google.protobuf.Duration const_value = 1 [(buf.validate.field).duration.const = {seconds: 5}];

  // 指定された秒数より短い必要があるとき
  google.protobuf.Duration lt_value = 2 [(buf.validate.field).duration.lt = {seconds: 5}];

  // 指定された秒数以下である必要があるとき
  google.protobuf.Duration lte_value = 3 [(buf.validate.field).duration.lte = {seconds: 5}];

  // 指定された秒数より長い必要があるとき
  google.protobuf.Duration gt_value = 4 [(buf.validate.field).duration.gt = {seconds: 5}];

  // 指定された秒数以上である必要があるとき
  google.protobuf.Duration gte_value = 5 [(buf.validate.field).duration.gte = {seconds: 5}];

  // 指定された複数の候補の中のいずれかに一致している必要があるとき
  google.protobuf.Duration in_value = 6 [
    (buf.validate.field).duration.in = {seconds: 5},
    (buf.validate.field).duration.in = {seconds: 6},
    (buf.validate.field).duration.in = {seconds: 7}
  ];

  // 指定された複数の値以外でなければならないとき
  google.protobuf.Duration not_in_value = 7 [
    (buf.validate.field).duration.not_in = {seconds: 5},
    (buf.validate.field).duration.not_in = {seconds: 6},
    (buf.validate.field).duration.not_in = {seconds: 7}
  ];
}

// 列挙型（enum）の値制限をしたいとき
message EnumValidationExample {
  // 列挙型の定義
  enum MyEnum {
    MY_ENUM_UNSPECIFIED = 0; // 未指定（デフォルト）
    MY_ENUM_VALUE1 = 1; // 値1
    MY_ENUM_VALUE2 = 2; // 値2
    MY_ENUM_VALUE3 = 3; // 値3
  }

  // 特定の値だけを許可
  MyEnum const_value = 1 [(buf.validate.field).enum.const = 1];

  // enumに定義された値のみ許可（未定義の数値はエラー）
  MyEnum defined_only_value = 2 [(buf.validate.field).enum.defined_only = true];

  // 指定した値（1または2）のみ許容
  MyEnum in_value = 3 [
    (buf.validate.field).enum.in = 1,
    (buf.validate.field).enum.in = 2
  ];

  // 指定した値（1と2）以外のみ許容
  MyEnum not_in_value = 4 [
    (buf.validate.field).enum.not_in = 1,
    (buf.validate.field).enum.not_in = 2
  ];
}

// Timestampの比較をしたいとき
message TimestampValidationExample {
  // 指定された時刻と一致している必要があるとき
  google.protobuf.Timestamp const_value = 1 [(buf.validate.field).timestamp.const = {seconds: 1717416000}];
  // 指定された時刻よりも前である必要があるとき
  google.protobuf.Timestamp lt_value = 2 [(buf.validate.field).timestamp.lt = {seconds: 1717416000}];
  // 指定された時刻以前（同じでもOK）である必要があるとき
  google.protobuf.Timestamp lte_value = 3 [(buf.validate.field).timestamp.lte = {seconds: 1717416000}];
  // 現在時刻よりも前である必要があるとき
  google.protobuf.Timestamp lt_now_value = 4 [(buf.validate.field).timestamp.lt_now = true];
  // 指定された時刻よりも後である必要があるとき
  google.protobuf.Timestamp gt_value = 5 [(buf.validate.field).timestamp.gt = {seconds: 1717416000}];
  // 指定された時刻以降（同じでもOK）である必要があるとき
  google.protobuf.Timestamp gte_value = 6 [(buf.validate.field).timestamp.gte = {seconds: 1717416000}];
  // 現在時刻よりも後である必要があるとき
  google.protobuf.Timestamp gt_now_value = 7 [(buf.validate.field).timestamp.gt_now = true];
  // 現在時刻の前後N秒以内である必要があるとき（この例では±1時間）
  google.protobuf.Timestamp within_value = 8 [(buf.validate.field).timestamp.within = {seconds: 3600}];
}

message GoogleApiFieldExample {
  // サーバーからの出力専用フィールド（リクエストに含めても無視される）
  google.protobuf.Timestamp created_at = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // クライアントからの入力専用フィールド（レスポンスには含まれない）
  google.protobuf.Timestamp updated_at = 2 [(google.api.field_behavior) = INPUT_ONLY];
  // リクエスト時に必須のフィールド（未指定ならバリデーションエラー）
  google.protobuf.Timestamp required_at = 3 [(google.api.field_behavior) = REQUIRED];
  // 明示的にオプション（省略可能）であることを示すフィールド
  google.protobuf.Timestamp optional_at = 4 [(google.api.field_behavior) = OPTIONAL];

  // このメッセージは PREVIEW 限定（公開前 or 限定公開用）
  // 他にも以下の制限が利用可能：
  // - INTERNAL: 社内限定
  // - TRUSTED_TESTER: 信頼されたテストユーザー向け
  // - SPECIAL_TESTER: 特定テスター向け
  option (google.api.message_visibility).restriction = "PREVIEW";
}

// CEL式で柔軟なルールを定義したいとき
message FieldConstraintsExample {
  // 偶数であることを検証するCEL式
  int32 even_value = 1 [(buf.validate.field).cel = {
    id: "int32.even"
    message: "value must be even number"
    expression: "this % 2 == 0"
  }];
}
